import java.awt.Dimension;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JTextArea;
import javax.swing.JTextField;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author mike
 */
public class UI extends javax.swing.JFrame {

    /**
     * Creates new form UI
     */
    public UI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gamesSort = new javax.swing.ButtonGroup();
        addGames = new javax.swing.JDialog();
        nameLabel = new javax.swing.JLabel();
        consoleLabel = new javax.swing.JLabel();
        genreLabel = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        ownedLabel = new javax.swing.JLabel();
        nameFieldGames = new javax.swing.JTextField();
        consoleBoxGames = new javax.swing.JComboBox();
        genreBoxGames = new javax.swing.JComboBox();
        dateFieldGames = new javax.swing.JFormattedTextField();
        ownedRadioGames = new javax.swing.JRadioButton();
        notOwnedRadio = new javax.swing.JRadioButton();
        confirmButtonGames = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        toDoRadioGames = new javax.swing.JRadioButton();
        currentRadioGames = new javax.swing.JRadioButton();
        finishedRadioGames = new javax.swing.JRadioButton();
        ownedRadioButtons = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        columnRadioButtons = new javax.swing.ButtonGroup();
        booksSort = new javax.swing.ButtonGroup();
        moviesSort = new javax.swing.ButtonGroup();
        tvSort = new javax.swing.ButtonGroup();
        addBooks = new javax.swing.JDialog();
        nameLabel1 = new javax.swing.JLabel();
        consoleLabel1 = new javax.swing.JLabel();
        genreLabel1 = new javax.swing.JLabel();
        dateLabel1 = new javax.swing.JLabel();
        ownedLabel1 = new javax.swing.JLabel();
        nameFieldBooks = new javax.swing.JTextField();
        genreBoxBooks = new javax.swing.JComboBox();
        dateFieldBooks = new javax.swing.JFormattedTextField();
        ownedRadioBooks = new javax.swing.JRadioButton();
        notOwnedRadioBooks = new javax.swing.JRadioButton();
        confirmButtonBooks = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        toDoRadioBooks = new javax.swing.JRadioButton();
        currentRadioBooks = new javax.swing.JRadioButton();
        finishedRadioBooks = new javax.swing.JRadioButton();
        authorFieldBooks = new javax.swing.JTextField();
        addMovies = new javax.swing.JDialog();
        nameLabel2 = new javax.swing.JLabel();
        genreLabel2 = new javax.swing.JLabel();
        dateLabel2 = new javax.swing.JLabel();
        ownedLabel2 = new javax.swing.JLabel();
        nameFieldMovies = new javax.swing.JTextField();
        genreBoxMovies = new javax.swing.JComboBox();
        dateFieldMovies = new javax.swing.JFormattedTextField();
        ownedRadioMovies = new javax.swing.JRadioButton();
        notOwnedRadioMovies = new javax.swing.JRadioButton();
        confirmButtonMovies = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        toDoRadioMovies = new javax.swing.JRadioButton();
        currentRadioMovies = new javax.swing.JRadioButton();
        finishedRadioMovies = new javax.swing.JRadioButton();
        addTv = new javax.swing.JDialog();
        nameLabel3 = new javax.swing.JLabel();
        genreLabel3 = new javax.swing.JLabel();
        dateLabel3 = new javax.swing.JLabel();
        nameFieldTv = new javax.swing.JTextField();
        genreBoxTv = new javax.swing.JComboBox();
        dateFieldTv = new javax.swing.JFormattedTextField();
        confirmButtonTv = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        toDoRadioTv = new javax.swing.JRadioButton();
        currentRadioTv = new javax.swing.JRadioButton();
        finishedRadioTv = new javax.swing.JRadioButton();
        mysqlLogin = new javax.swing.JDialog();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        mysqlDatabaseNameField = new javax.swing.JTextField();
        mysqlUsernameField = new javax.swing.JTextField();
        mysqlConnectButton = new javax.swing.JButton();
        jLabel26 = new javax.swing.JLabel();
        mysqlURLField = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        mysqlPortField = new javax.swing.JTextField();
        mysqlPasswordField = new javax.swing.JPasswordField();
        mysqlRememberCheckbox = new javax.swing.JCheckBox();
        jTabbedPane = new javax.swing.JTabbedPane();
        games = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        byNameGames = new javax.swing.JToggleButton();
        byGenreGrames = new javax.swing.JToggleButton();
        byDateGames = new javax.swing.JToggleButton();
        byOwnershipGames = new javax.swing.JToggleButton();
        byConsoleGames = new javax.swing.JToggleButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        toDoGames = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        currentGames = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        finishedGames = new javax.swing.JList();
        moveToDoCurrentGames = new javax.swing.JButton();
        moveCurrentToDoGames = new javax.swing.JButton();
        moveFinishedCurrentGames = new javax.swing.JButton();
        moveCurrentFinishedGames = new javax.swing.JButton();
        addToDoGames = new javax.swing.JButton();
        removeToDoGames = new javax.swing.JButton();
        removeCurrentGames = new javax.swing.JButton();
        addCurrentGames = new javax.swing.JButton();
        addFinishedGames = new javax.swing.JButton();
        removeFinishedGames = new javax.swing.JButton();
        books = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        byNameBooks = new javax.swing.JToggleButton();
        byGenreBooks = new javax.swing.JToggleButton();
        byDateBooks = new javax.swing.JToggleButton();
        byOwnershipBooks = new javax.swing.JToggleButton();
        byAuthorBooks = new javax.swing.JToggleButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        toDoBooks = new javax.swing.JList();
        jScrollPane5 = new javax.swing.JScrollPane();
        currentBooks = new javax.swing.JList();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        finishedBooks = new javax.swing.JList();
        moveToDoCurrentBooks = new javax.swing.JButton();
        moveCurrentToDoBooks = new javax.swing.JButton();
        moveFinishedCurrentBooks = new javax.swing.JButton();
        moveCurrentFinishedBooks = new javax.swing.JButton();
        addToDoBooks = new javax.swing.JButton();
        removeToDoBooks = new javax.swing.JButton();
        removeCurrentBooks = new javax.swing.JButton();
        addCurrentBooks = new javax.swing.JButton();
        addFinishedBooks = new javax.swing.JButton();
        removeFinishedBooks = new javax.swing.JButton();
        movies = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        byNameMovies = new javax.swing.JToggleButton();
        byGenreMovies = new javax.swing.JToggleButton();
        byDateMovies = new javax.swing.JToggleButton();
        byOwnershipMovies = new javax.swing.JToggleButton();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        toDoMovies = new javax.swing.JList();
        jScrollPane8 = new javax.swing.JScrollPane();
        currentMovies = new javax.swing.JList();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        finishedMovies = new javax.swing.JList();
        moveToDoCurrentMovies = new javax.swing.JButton();
        moveCurrentToDoMovies = new javax.swing.JButton();
        moveFinishedCurrentMovies = new javax.swing.JButton();
        moveCurrentFinishedMovies = new javax.swing.JButton();
        addToDoMovies = new javax.swing.JButton();
        removeToDoMovies = new javax.swing.JButton();
        removeCurrentMovies = new javax.swing.JButton();
        addCurrentMovies = new javax.swing.JButton();
        addFinishedMovies = new javax.swing.JButton();
        removeFinishedMovies = new javax.swing.JButton();
        tv = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        byNameTv = new javax.swing.JToggleButton();
        byGenreTv = new javax.swing.JToggleButton();
        byDateTv = new javax.swing.JToggleButton();
        byOwnershipTv = new javax.swing.JToggleButton();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        toDoTv = new javax.swing.JList();
        jScrollPane11 = new javax.swing.JScrollPane();
        currentTv = new javax.swing.JList();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane12 = new javax.swing.JScrollPane();
        finishedTv = new javax.swing.JList();
        moveToDoCurrentTv = new javax.swing.JButton();
        moveCurrentToDoTv = new javax.swing.JButton();
        moveFinishedCurrentTv = new javax.swing.JButton();
        moveCurrentFinishedTv = new javax.swing.JButton();
        addToDoTv = new javax.swing.JButton();
        removeToDoTv = new javax.swing.JButton();
        removeCurrentTv = new javax.swing.JButton();
        addCurrentTv = new javax.swing.JButton();
        addFinishedTv = new javax.swing.JButton();
        removeFinishedTv = new javax.swing.JButton();

        addGames.setTitle("Add");
        addGames.setAlwaysOnTop(true);
        addGames.setMinimumSize(new java.awt.Dimension(400, 255));
        addGames.setResizable(false);

        nameLabel.setText("Name:");

        consoleLabel.setText("Console:");

        genreLabel.setText("Genre:");

        dateLabel.setText("Date:");

        ownedLabel.setText("Owned:");

        nameFieldGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldGamesActionPerformed(evt);
            }
        });

        consoleBoxGames.setEditable(true);
        consoleBoxGames.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "GameBoy", "GameBoy Advance", "GameBoy Color", "Gamecube", "NES", "Nintendo 3DS", "Nintendo 64", "Nintendo DS", "PC", "PS1", "PS2", "PS3", "PS4", "Sega Genesis", "SNES", "Wii", "Wii U", "XBox", "XBox 360", "XBox One" }));
        consoleBoxGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consoleBoxGamesActionPerformed(evt);
            }
        });

        genreBoxGames.setEditable(true);
        genreBoxGames.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Action", "Action-Adventure", "Hack and Slash", "Horror", "Fighter", "Platformer", "Puzzle", "Racing", "RPG", "Roguelike", "Shooter", "Simulation", "Strategy" }));

        dateFieldGames.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("####"))));
        dateFieldGames.setToolTipText("");
        dateFieldGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateFieldGamesActionPerformed(evt);
            }
        });

        ownedRadioButtons.add(ownedRadioGames);
        ownedRadioGames.setText("Yes");
        ownedRadioGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ownedRadioGamesActionPerformed(evt);
            }
        });

        ownedRadioButtons.add(notOwnedRadio);
        notOwnedRadio.setText("No");
        notOwnedRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notOwnedRadioActionPerformed(evt);
            }
        });

        confirmButtonGames.setText("Confirm");
        confirmButtonGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonGamesActionPerformed(evt);
            }
        });

        jLabel3.setText("Column:");

        columnRadioButtons.add(toDoRadioGames);
        toDoRadioGames.setText("To Do");
        toDoRadioGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toDoRadioGamesActionPerformed(evt);
            }
        });

        columnRadioButtons.add(currentRadioGames);
        currentRadioGames.setText("Current");
        currentRadioGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentRadioGamesActionPerformed(evt);
            }
        });

        columnRadioButtons.add(finishedRadioGames);
        finishedRadioGames.setText("Finished");
        finishedRadioGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishedRadioGamesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addGamesLayout = new javax.swing.GroupLayout(addGames.getContentPane());
        addGames.getContentPane().setLayout(addGamesLayout);
        addGamesLayout.setHorizontalGroup(
            addGamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addGamesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addGamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addGamesLayout.createSequentialGroup()
                        .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameFieldGames))
                    .addGroup(addGamesLayout.createSequentialGroup()
                        .addComponent(consoleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(consoleBoxGames, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(addGamesLayout.createSequentialGroup()
                        .addComponent(genreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(genreBoxGames, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(addGamesLayout.createSequentialGroup()
                        .addGroup(addGamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addGamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateFieldGames)
                            .addGroup(addGamesLayout.createSequentialGroup()
                                .addComponent(toDoRadioGames)
                                .addGap(18, 18, 18)
                                .addGroup(addGamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(addGamesLayout.createSequentialGroup()
                                        .addComponent(currentRadioGames)
                                        .addGap(18, 18, 18)
                                        .addComponent(finishedRadioGames)
                                        .addGap(0, 25, Short.MAX_VALUE))
                                    .addGroup(addGamesLayout.createSequentialGroup()
                                        .addComponent(notOwnedRadio)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(confirmButtonGames))))))
                    .addGroup(addGamesLayout.createSequentialGroup()
                        .addComponent(ownedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ownedRadioGames)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        addGamesLayout.setVerticalGroup(
            addGamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addGamesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addGamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameFieldGames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addGamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(consoleLabel)
                    .addComponent(consoleBoxGames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addGamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(genreLabel)
                    .addComponent(genreBoxGames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addGamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateLabel)
                    .addComponent(dateFieldGames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addGamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(toDoRadioGames)
                    .addComponent(currentRadioGames)
                    .addComponent(finishedRadioGames))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addGamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ownedLabel)
                    .addComponent(ownedRadioGames)
                    .addComponent(notOwnedRadio)
                    .addComponent(confirmButtonGames))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        addBooks.setTitle("Add");
        addBooks.setAlwaysOnTop(true);
        addBooks.setMinimumSize(new java.awt.Dimension(400, 255));
        addBooks.setResizable(false);

        nameLabel1.setText("Name:");

        consoleLabel1.setText("Author:");

        genreLabel1.setText("Genre:");

        dateLabel1.setText("Date:");

        ownedLabel1.setText("Owned:");

        nameFieldBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldBooksActionPerformed(evt);
            }
        });

        genreBoxBooks.setEditable(true);
        genreBoxBooks.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Action", "Adventure", "Biography", "Crime", "Drama", "Fantasy", "Historical", "Horror", "Humor/Satirical", "Mystery", "Psychology/Self-Help", "Realistic", "Romance", "Science Fiction", "Tragedy", "Western" }));
        genreBoxBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genreBoxBooksActionPerformed(evt);
            }
        });

        dateFieldBooks.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("####"))));
        dateFieldBooks.setToolTipText("");
        dateFieldBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateFieldBooksActionPerformed(evt);
            }
        });

        ownedRadioButtons.add(ownedRadioBooks);
        ownedRadioBooks.setText("Yes");
        ownedRadioBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ownedRadioBooksActionPerformed(evt);
            }
        });

        ownedRadioButtons.add(notOwnedRadioBooks);
        notOwnedRadioBooks.setText("No");
        notOwnedRadioBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notOwnedRadioBooksActionPerformed(evt);
            }
        });

        confirmButtonBooks.setText("Confirm");
        confirmButtonBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonBooksActionPerformed(evt);
            }
        });

        jLabel18.setText("Column:");

        columnRadioButtons.add(toDoRadioBooks);
        toDoRadioBooks.setText("To Do");
        toDoRadioBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toDoRadioBooksActionPerformed(evt);
            }
        });

        columnRadioButtons.add(currentRadioBooks);
        currentRadioBooks.setText("Current");
        currentRadioBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentRadioBooksActionPerformed(evt);
            }
        });

        columnRadioButtons.add(finishedRadioBooks);
        finishedRadioBooks.setText("Finished");
        finishedRadioBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishedRadioBooksActionPerformed(evt);
            }
        });

        authorFieldBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authorFieldBooksActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addBooksLayout = new javax.swing.GroupLayout(addBooks.getContentPane());
        addBooks.getContentPane().setLayout(addBooksLayout);
        addBooksLayout.setHorizontalGroup(
            addBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addBooksLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addBooksLayout.createSequentialGroup()
                        .addComponent(nameLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameFieldBooks))
                    .addGroup(addBooksLayout.createSequentialGroup()
                        .addComponent(genreLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(genreBoxBooks, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(addBooksLayout.createSequentialGroup()
                        .addGroup(addBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateFieldBooks)
                            .addGroup(addBooksLayout.createSequentialGroup()
                                .addComponent(toDoRadioBooks)
                                .addGap(18, 18, 18)
                                .addGroup(addBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(addBooksLayout.createSequentialGroup()
                                        .addComponent(currentRadioBooks)
                                        .addGap(18, 18, 18)
                                        .addComponent(finishedRadioBooks)
                                        .addGap(0, 25, Short.MAX_VALUE))
                                    .addGroup(addBooksLayout.createSequentialGroup()
                                        .addComponent(notOwnedRadioBooks)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(confirmButtonBooks))))))
                    .addGroup(addBooksLayout.createSequentialGroup()
                        .addComponent(ownedLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ownedRadioBooks)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(addBooksLayout.createSequentialGroup()
                        .addComponent(consoleLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(authorFieldBooks)))
                .addContainerGap())
        );
        addBooksLayout.setVerticalGroup(
            addBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addBooksLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel1)
                    .addComponent(nameFieldBooks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(consoleLabel1)
                    .addComponent(authorFieldBooks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(genreLabel1)
                    .addComponent(genreBoxBooks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateLabel1)
                    .addComponent(dateFieldBooks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(toDoRadioBooks)
                    .addComponent(currentRadioBooks)
                    .addComponent(finishedRadioBooks))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ownedLabel1)
                    .addComponent(ownedRadioBooks)
                    .addComponent(notOwnedRadioBooks)
                    .addComponent(confirmButtonBooks))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        addMovies.setTitle("Add");
        addMovies.setAlwaysOnTop(true);
        addMovies.setMinimumSize(new java.awt.Dimension(400, 210));
        addMovies.setResizable(false);

        nameLabel2.setText("Name:");

        genreLabel2.setText("Genre:");

        dateLabel2.setText("Date:");

        ownedLabel2.setText("Owned:");

        nameFieldMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldMoviesActionPerformed(evt);
            }
        });

        genreBoxMovies.setEditable(true);
        genreBoxMovies.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Action", "Adventure", "Animation", "Biography", "Comedy", "Crime", "Documentary", "Drama", "Fantasy", "History", "Horror", "Musical", "Mystery", "Romance", "Sci-Fi", "Sport", "Thriller", "War", "Western" }));

        dateFieldMovies.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("####"))));
        dateFieldMovies.setToolTipText("");
        dateFieldMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateFieldMoviesActionPerformed(evt);
            }
        });

        ownedRadioButtons.add(ownedRadioMovies);
        ownedRadioMovies.setSelected(true);
        ownedRadioMovies.setText("Yes");
        ownedRadioMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ownedRadioMoviesActionPerformed(evt);
            }
        });

        ownedRadioButtons.add(notOwnedRadioMovies);
        notOwnedRadioMovies.setText("No");
        notOwnedRadioMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notOwnedRadioMoviesActionPerformed(evt);
            }
        });

        confirmButtonMovies.setText("Confirm");
        confirmButtonMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonMoviesActionPerformed(evt);
            }
        });

        jLabel19.setText("Column:");

        columnRadioButtons.add(toDoRadioMovies);
        toDoRadioMovies.setText("To Do");
        toDoRadioMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toDoRadioMoviesActionPerformed(evt);
            }
        });

        columnRadioButtons.add(currentRadioMovies);
        currentRadioMovies.setText("Current");
        currentRadioMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentRadioMoviesActionPerformed(evt);
            }
        });

        columnRadioButtons.add(finishedRadioMovies);
        finishedRadioMovies.setText("Finished");
        finishedRadioMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishedRadioMoviesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addMoviesLayout = new javax.swing.GroupLayout(addMovies.getContentPane());
        addMovies.getContentPane().setLayout(addMoviesLayout);
        addMoviesLayout.setHorizontalGroup(
            addMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addMoviesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addMoviesLayout.createSequentialGroup()
                        .addComponent(nameLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameFieldMovies))
                    .addGroup(addMoviesLayout.createSequentialGroup()
                        .addComponent(genreLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(genreBoxMovies, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(addMoviesLayout.createSequentialGroup()
                        .addGroup(addMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateFieldMovies)
                            .addGroup(addMoviesLayout.createSequentialGroup()
                                .addComponent(toDoRadioMovies)
                                .addGap(18, 18, 18)
                                .addGroup(addMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(addMoviesLayout.createSequentialGroup()
                                        .addComponent(currentRadioMovies)
                                        .addGap(18, 18, 18)
                                        .addComponent(finishedRadioMovies)
                                        .addGap(0, 25, Short.MAX_VALUE))
                                    .addGroup(addMoviesLayout.createSequentialGroup()
                                        .addComponent(notOwnedRadioMovies)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(confirmButtonMovies))))))
                    .addGroup(addMoviesLayout.createSequentialGroup()
                        .addComponent(ownedLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ownedRadioMovies)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        addMoviesLayout.setVerticalGroup(
            addMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addMoviesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(addMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel2)
                    .addComponent(nameFieldMovies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(genreLabel2)
                    .addComponent(genreBoxMovies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateLabel2)
                    .addComponent(dateFieldMovies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(toDoRadioMovies)
                    .addComponent(currentRadioMovies)
                    .addComponent(finishedRadioMovies))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addMoviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ownedLabel2)
                    .addComponent(ownedRadioMovies)
                    .addComponent(notOwnedRadioMovies)
                    .addComponent(confirmButtonMovies))
                .addContainerGap())
        );

        addTv.setTitle("Add");
        addTv.setAlwaysOnTop(true);
        addTv.setMinimumSize(new java.awt.Dimension(400, 210));
        addTv.setResizable(false);

        nameLabel3.setText("Name:");

        genreLabel3.setText("Genre:");

        dateLabel3.setText("Date:");

        nameFieldTv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldTvActionPerformed(evt);
            }
        });

        genreBoxTv.setEditable(true);
        genreBoxTv.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Action", "Adventure", "Animation", "Anime", "Biography", "Comedy", "Crime", "Documentary", "Drama", "Fantasy", "History", "Horror", "Mystery", "Reality TV", "Romance", "Sci-Fi", "Sitcom", "Sport", "Thriller", "War", "Western" }));
        genreBoxTv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genreBoxTvActionPerformed(evt);
            }
        });

        dateFieldTv.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("####"))));
        dateFieldTv.setToolTipText("");
        dateFieldTv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateFieldTvActionPerformed(evt);
            }
        });

        confirmButtonTv.setText("Confirm");
        confirmButtonTv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonTvActionPerformed(evt);
            }
        });

        jLabel20.setText("Column:");

        columnRadioButtons.add(toDoRadioTv);
        toDoRadioTv.setText("To Do");
        toDoRadioTv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toDoRadioTvActionPerformed(evt);
            }
        });

        columnRadioButtons.add(currentRadioTv);
        currentRadioTv.setText("Current");
        currentRadioTv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentRadioTvActionPerformed(evt);
            }
        });

        columnRadioButtons.add(finishedRadioTv);
        finishedRadioTv.setText("Finished");
        finishedRadioTv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishedRadioTvActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addTvLayout = new javax.swing.GroupLayout(addTv.getContentPane());
        addTv.getContentPane().setLayout(addTvLayout);
        addTvLayout.setHorizontalGroup(
            addTvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addTvLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addTvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addTvLayout.createSequentialGroup()
                        .addComponent(nameLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameFieldTv))
                    .addGroup(addTvLayout.createSequentialGroup()
                        .addComponent(genreLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(genreBoxTv, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(addTvLayout.createSequentialGroup()
                        .addGroup(addTvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addTvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateFieldTv)
                            .addGroup(addTvLayout.createSequentialGroup()
                                .addComponent(toDoRadioTv)
                                .addGap(18, 18, 18)
                                .addGroup(addTvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(addTvLayout.createSequentialGroup()
                                        .addComponent(currentRadioTv)
                                        .addGap(18, 18, 18)
                                        .addComponent(finishedRadioTv)
                                        .addGap(0, 25, Short.MAX_VALUE))
                                    .addGroup(addTvLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(confirmButtonTv)))))))
                .addContainerGap())
        );
        addTvLayout.setVerticalGroup(
            addTvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addTvLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(addTvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel3)
                    .addComponent(nameFieldTv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addTvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(genreLabel3)
                    .addComponent(genreBoxTv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addTvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateLabel3)
                    .addComponent(dateFieldTv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addTvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(toDoRadioTv)
                    .addComponent(currentRadioTv)
                    .addComponent(finishedRadioTv))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(confirmButtonTv)
                .addContainerGap())
        );

        mysqlLogin.setMinimumSize(new java.awt.Dimension(415, 280));

        jLabel21.setText("Please enter your URL/IP Address, mysql database name, a ");

        jLabel22.setText("username for that database, and the corresponding password.");

        jLabel23.setText("Database Name:");

        jLabel24.setText("Username:");

        jLabel25.setText("Password:");

        mysqlDatabaseNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mysqlDatabaseNameFieldActionPerformed(evt);
            }
        });

        mysqlUsernameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mysqlUsernameFieldActionPerformed(evt);
            }
        });

        mysqlConnectButton.setText("Connect");
        mysqlConnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mysqlConnectButtonActionPerformed(evt);
            }
        });

        jLabel26.setText("URL/IP Address:");

        mysqlURLField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mysqlURLFieldActionPerformed(evt);
            }
        });

        jLabel27.setText("Port:");

        mysqlPortField.setText("3306");

        mysqlRememberCheckbox.setSelected(true);
        mysqlRememberCheckbox.setText("Remember?");

        javax.swing.GroupLayout mysqlLoginLayout = new javax.swing.GroupLayout(mysqlLogin.getContentPane());
        mysqlLogin.getContentPane().setLayout(mysqlLoginLayout);
        mysqlLoginLayout.setHorizontalGroup(
            mysqlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mysqlLoginLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mysqlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mysqlLoginLayout.createSequentialGroup()
                        .addGroup(mysqlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21)
                            .addComponent(jLabel22))
                        .addGap(0, 5, Short.MAX_VALUE))
                    .addGroup(mysqlLoginLayout.createSequentialGroup()
                        .addGroup(mysqlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel26)
                            .addComponent(jLabel23)
                            .addComponent(jLabel24)
                            .addComponent(jLabel25)
                            .addComponent(jLabel27))
                        .addGap(18, 18, 18)
                        .addGroup(mysqlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mysqlUsernameField)
                            .addComponent(mysqlDatabaseNameField)
                            .addComponent(mysqlURLField)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mysqlLoginLayout.createSequentialGroup()
                                .addGroup(mysqlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(mysqlPasswordField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(mysqlPortField))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(mysqlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(mysqlConnectButton)
                                    .addComponent(mysqlRememberCheckbox))))))
                .addContainerGap())
        );
        mysqlLoginLayout.setVerticalGroup(
            mysqlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mysqlLoginLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mysqlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(mysqlURLField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mysqlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(mysqlDatabaseNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mysqlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(mysqlUsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mysqlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(mysqlPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mysqlRememberCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mysqlLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(mysqlPortField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mysqlConnectButton))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Media To Do List");
        setMinimumSize(new java.awt.Dimension(980, 540));
        setResizable(false);

        jTabbedPane.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTabbedPane.setFont(new java.awt.Font("Noto Sans", 0, 36)); // NOI18N
        jTabbedPane.setName(""); // NOI18N
        jTabbedPane.setPreferredSize(new java.awt.Dimension(960, 540));

        jLabel1.setFont(new java.awt.Font("Noto Sans", 0, 24)); // NOI18N
        jLabel1.setText("Sort:");

        gamesSort.add(byNameGames);
        byNameGames.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        byNameGames.setText("By Name");
        byNameGames.setToolTipText("");
        byNameGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                byNameGamesActionPerformed(evt);
            }
        });

        gamesSort.add(byGenreGrames);
        byGenreGrames.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        byGenreGrames.setText("By Genre");
        byGenreGrames.setToolTipText("");
        byGenreGrames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                byGenreGramesActionPerformed(evt);
            }
        });

        gamesSort.add(byDateGames);
        byDateGames.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        byDateGames.setText("By Date");
        byDateGames.setToolTipText("");
        byDateGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                byDateGamesActionPerformed(evt);
            }
        });

        gamesSort.add(byOwnershipGames);
        byOwnershipGames.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        byOwnershipGames.setText("By Ownership");
        byOwnershipGames.setToolTipText("");
        byOwnershipGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                byOwnershipGamesActionPerformed(evt);
            }
        });

        gamesSort.add(byConsoleGames);
        byConsoleGames.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        byConsoleGames.setText("By Console");
        byConsoleGames.setToolTipText("");
        byConsoleGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                byConsoleGamesActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Finished");

        toDoGames.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", " " };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        toDoGames.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        toDoGames.setDragEnabled(true);
        toDoGames.setMaximumSize(null);
        toDoGames.setVisibleRowCount(12);
        toDoGames.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                toDoGamesPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(toDoGames);

        currentGames.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        currentGames.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        currentGames.setMaximumSize(null);
        currentGames.setVisibleRowCount(12);
        jScrollPane2.setViewportView(currentGames);

        jLabel4.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Want to Beat");

        jLabel5.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Working On / Priority");

        finishedGames.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        finishedGames.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        finishedGames.setMaximumSize(null);
        finishedGames.setVisibleRowCount(12);
        jScrollPane3.setViewportView(finishedGames);

        moveToDoCurrentGames.setText(">");
        moveToDoCurrentGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveToDoCurrentGamesActionPerformed(evt);
            }
        });

        moveCurrentToDoGames.setText("<");
        moveCurrentToDoGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveCurrentToDoGamesActionPerformed(evt);
            }
        });

        moveFinishedCurrentGames.setText("<");
        moveFinishedCurrentGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveFinishedCurrentGamesActionPerformed(evt);
            }
        });

        moveCurrentFinishedGames.setText(">");
        moveCurrentFinishedGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveCurrentFinishedGamesActionPerformed(evt);
            }
        });

        addToDoGames.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        addToDoGames.setText("Add");
        addToDoGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToDoGamesActionPerformed(evt);
            }
        });

        removeToDoGames.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        removeToDoGames.setText("Remove");
        removeToDoGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeToDoGamesActionPerformed(evt);
            }
        });

        removeCurrentGames.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        removeCurrentGames.setText("Remove");
        removeCurrentGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCurrentGamesActionPerformed(evt);
            }
        });

        addCurrentGames.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        addCurrentGames.setText("Add");
        addCurrentGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCurrentGamesActionPerformed(evt);
            }
        });

        addFinishedGames.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        addFinishedGames.setText("Add");
        addFinishedGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFinishedGamesActionPerformed(evt);
            }
        });

        removeFinishedGames.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        removeFinishedGames.setText("Remove");
        removeFinishedGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFinishedGamesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout gamesLayout = new javax.swing.GroupLayout(games);
        games.setLayout(gamesLayout);
        gamesLayout.setHorizontalGroup(
            gamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gamesLayout.createSequentialGroup()
                .addGroup(gamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gamesLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(gamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(gamesLayout.createSequentialGroup()
                                .addComponent(addToDoGames, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeToDoGames, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(gamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(moveToDoCurrentGames)
                            .addComponent(moveCurrentToDoGames))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(gamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(gamesLayout.createSequentialGroup()
                                .addComponent(addCurrentGames, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeCurrentGames, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(gamesLayout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(gamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(moveCurrentFinishedGames)
                                    .addComponent(moveFinishedCurrentGames))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(gamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(gamesLayout.createSequentialGroup()
                                .addComponent(addFinishedGames, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeFinishedGames, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(gamesLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(byNameGames)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(byGenreGrames)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(byDateGames)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(byOwnershipGames)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(byConsoleGames)))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        gamesLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addCurrentGames, removeCurrentGames});

        gamesLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addFinishedGames, removeFinishedGames});

        gamesLayout.setVerticalGroup(
            gamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gamesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(byNameGames)
                    .addComponent(byGenreGrames)
                    .addComponent(byDateGames)
                    .addComponent(byOwnershipGames)
                    .addComponent(byConsoleGames))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(gamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(gamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(gamesLayout.createSequentialGroup()
                            .addGap(132, 132, 132)
                            .addComponent(moveToDoCurrentGames)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(moveCurrentToDoGames)))
                    .addGroup(gamesLayout.createSequentialGroup()
                        .addGroup(gamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(gamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(gamesLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(gamesLayout.createSequentialGroup()
                                .addGap(133, 133, 133)
                                .addComponent(moveCurrentFinishedGames)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(moveFinishedCurrentGames)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(gamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(removeToDoGames)
                    .addComponent(addToDoGames)
                    .addGroup(gamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addCurrentGames)
                        .addComponent(removeCurrentGames)
                        .addComponent(addFinishedGames)
                        .addComponent(removeFinishedGames)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("GAMES", games);

        jLabel6.setFont(new java.awt.Font("Noto Sans", 0, 24)); // NOI18N
        jLabel6.setText("Sort:");

        booksSort.add(byNameBooks);
        byNameBooks.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        byNameBooks.setText("By Name");
        byNameBooks.setToolTipText("");
        byNameBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                byNameBooksActionPerformed(evt);
            }
        });

        booksSort.add(byGenreBooks);
        byGenreBooks.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        byGenreBooks.setText("By Genre");
        byGenreBooks.setToolTipText("");
        byGenreBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                byGenreBooksActionPerformed(evt);
            }
        });

        booksSort.add(byDateBooks);
        byDateBooks.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        byDateBooks.setText("By Date");
        byDateBooks.setToolTipText("");
        byDateBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                byDateBooksActionPerformed(evt);
            }
        });

        booksSort.add(byOwnershipBooks);
        byOwnershipBooks.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        byOwnershipBooks.setText("By Ownership");
        byOwnershipBooks.setToolTipText("");
        byOwnershipBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                byOwnershipBooksActionPerformed(evt);
            }
        });

        booksSort.add(byAuthorBooks);
        byAuthorBooks.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        byAuthorBooks.setText("By Author");
        byAuthorBooks.setToolTipText("");
        byAuthorBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                byAuthorBooksActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Finished");

        toDoBooks.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", " " };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        toDoBooks.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        toDoBooks.setDragEnabled(true);
        toDoBooks.setMaximumSize(null);
        toDoBooks.setVisibleRowCount(12);
        toDoBooks.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                toDoBooksPropertyChange(evt);
            }
        });
        jScrollPane4.setViewportView(toDoBooks);

        currentBooks.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        currentBooks.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        currentBooks.setMaximumSize(null);
        currentBooks.setVisibleRowCount(12);
        jScrollPane5.setViewportView(currentBooks);

        jLabel8.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Want to Read");

        jLabel9.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Working On / Priority");

        finishedBooks.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        finishedBooks.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        finishedBooks.setMaximumSize(null);
        finishedBooks.setVisibleRowCount(12);
        jScrollPane6.setViewportView(finishedBooks);

        moveToDoCurrentBooks.setText(">");
        moveToDoCurrentBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveToDoCurrentBooksActionPerformed(evt);
            }
        });

        moveCurrentToDoBooks.setText("<");
        moveCurrentToDoBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveCurrentToDoBooksActionPerformed(evt);
            }
        });

        moveFinishedCurrentBooks.setText("<");
        moveFinishedCurrentBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveFinishedCurrentBooksActionPerformed(evt);
            }
        });

        moveCurrentFinishedBooks.setText(">");
        moveCurrentFinishedBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveCurrentFinishedBooksActionPerformed(evt);
            }
        });

        addToDoBooks.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        addToDoBooks.setText("Add");
        addToDoBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToDoBooksActionPerformed(evt);
            }
        });

        removeToDoBooks.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        removeToDoBooks.setText("Remove");
        removeToDoBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeToDoBooksActionPerformed(evt);
            }
        });

        removeCurrentBooks.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        removeCurrentBooks.setText("Remove");
        removeCurrentBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCurrentBooksActionPerformed(evt);
            }
        });

        addCurrentBooks.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        addCurrentBooks.setText("Add");
        addCurrentBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCurrentBooksActionPerformed(evt);
            }
        });

        addFinishedBooks.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        addFinishedBooks.setText("Add");
        addFinishedBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFinishedBooksActionPerformed(evt);
            }
        });

        removeFinishedBooks.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        removeFinishedBooks.setText("Remove");
        removeFinishedBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFinishedBooksActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout booksLayout = new javax.swing.GroupLayout(books);
        books.setLayout(booksLayout);
        booksLayout.setHorizontalGroup(
            booksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(booksLayout.createSequentialGroup()
                .addGroup(booksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(booksLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(booksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(booksLayout.createSequentialGroup()
                                .addComponent(addToDoBooks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeToDoBooks, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(booksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(moveToDoCurrentBooks)
                            .addComponent(moveCurrentToDoBooks))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(booksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(booksLayout.createSequentialGroup()
                                .addGroup(booksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(booksLayout.createSequentialGroup()
                                        .addComponent(addCurrentBooks, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(removeCurrentBooks, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(booksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(moveCurrentFinishedBooks)
                                    .addComponent(moveFinishedCurrentBooks))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(booksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, booksLayout.createSequentialGroup()
                                .addComponent(addFinishedBooks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeFinishedBooks, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(booksLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(byNameBooks)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(byGenreBooks)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(byDateBooks)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(byOwnershipBooks)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(byAuthorBooks)))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        booksLayout.setVerticalGroup(
            booksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(booksLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(booksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(byNameBooks)
                    .addComponent(byGenreBooks)
                    .addComponent(byDateBooks)
                    .addComponent(byOwnershipBooks)
                    .addComponent(byAuthorBooks))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(booksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(booksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(booksLayout.createSequentialGroup()
                            .addGap(132, 132, 132)
                            .addComponent(moveToDoCurrentBooks)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(moveCurrentToDoBooks)))
                    .addGroup(booksLayout.createSequentialGroup()
                        .addGroup(booksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(booksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(booksLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(booksLayout.createSequentialGroup()
                                .addGap(133, 133, 133)
                                .addComponent(moveCurrentFinishedBooks)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(moveFinishedCurrentBooks)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(booksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(removeToDoBooks)
                    .addComponent(addToDoBooks)
                    .addComponent(removeFinishedBooks)
                    .addGroup(booksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addCurrentBooks)
                        .addComponent(addFinishedBooks)
                        .addComponent(removeCurrentBooks)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("BOOKS", books);

        jLabel10.setFont(new java.awt.Font("Noto Sans", 0, 24)); // NOI18N
        jLabel10.setText("Sort:");

        moviesSort.add(byNameMovies);
        byNameMovies.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        byNameMovies.setText("By Name");
        byNameMovies.setToolTipText("");
        byNameMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                byNameMoviesActionPerformed(evt);
            }
        });

        moviesSort.add(byGenreMovies);
        byGenreMovies.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        byGenreMovies.setText("By Genre");
        byGenreMovies.setToolTipText("");
        byGenreMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                byGenreMoviesActionPerformed(evt);
            }
        });

        moviesSort.add(byDateMovies);
        byDateMovies.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        byDateMovies.setText("By Date");
        byDateMovies.setToolTipText("");
        byDateMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                byDateMoviesActionPerformed(evt);
            }
        });

        moviesSort.add(byOwnershipMovies);
        byOwnershipMovies.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        byOwnershipMovies.setText("By Ownership");
        byOwnershipMovies.setToolTipText("");
        byOwnershipMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                byOwnershipMoviesActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Finished");

        toDoMovies.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", " " };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        toDoMovies.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        toDoMovies.setDragEnabled(true);
        toDoMovies.setMaximumSize(null);
        toDoMovies.setVisibleRowCount(12);
        toDoMovies.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                toDoMoviesPropertyChange(evt);
            }
        });
        jScrollPane7.setViewportView(toDoMovies);

        currentMovies.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        currentMovies.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        currentMovies.setMaximumSize(null);
        currentMovies.setVisibleRowCount(12);
        jScrollPane8.setViewportView(currentMovies);

        jLabel12.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Want to Watch");

        jLabel13.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Working On / Priority");

        finishedMovies.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        finishedMovies.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        finishedMovies.setMaximumSize(null);
        finishedMovies.setVisibleRowCount(12);
        jScrollPane9.setViewportView(finishedMovies);

        moveToDoCurrentMovies.setText(">");
        moveToDoCurrentMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveToDoCurrentMoviesActionPerformed(evt);
            }
        });

        moveCurrentToDoMovies.setText("<");
        moveCurrentToDoMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveCurrentToDoMoviesActionPerformed(evt);
            }
        });

        moveFinishedCurrentMovies.setText("<");
        moveFinishedCurrentMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveFinishedCurrentMoviesActionPerformed(evt);
            }
        });

        moveCurrentFinishedMovies.setText(">");
        moveCurrentFinishedMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveCurrentFinishedMoviesActionPerformed(evt);
            }
        });

        addToDoMovies.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        addToDoMovies.setText("Add");
        addToDoMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToDoMoviesActionPerformed(evt);
            }
        });

        removeToDoMovies.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        removeToDoMovies.setText("Remove");
        removeToDoMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeToDoMoviesActionPerformed(evt);
            }
        });

        removeCurrentMovies.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        removeCurrentMovies.setText("Remove");
        removeCurrentMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCurrentMoviesActionPerformed(evt);
            }
        });

        addCurrentMovies.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        addCurrentMovies.setText("Add");
        addCurrentMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCurrentMoviesActionPerformed(evt);
            }
        });

        addFinishedMovies.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        addFinishedMovies.setText("Add");
        addFinishedMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFinishedMoviesActionPerformed(evt);
            }
        });

        removeFinishedMovies.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        removeFinishedMovies.setText("Remove");
        removeFinishedMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFinishedMoviesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout moviesLayout = new javax.swing.GroupLayout(movies);
        movies.setLayout(moviesLayout);
        moviesLayout.setHorizontalGroup(
            moviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(moviesLayout.createSequentialGroup()
                .addGroup(moviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(moviesLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(moviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(moviesLayout.createSequentialGroup()
                                .addComponent(addToDoMovies, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeToDoMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(moviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(moveToDoCurrentMovies)
                            .addComponent(moveCurrentToDoMovies))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(moviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(moviesLayout.createSequentialGroup()
                                .addGroup(moviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(moviesLayout.createSequentialGroup()
                                        .addComponent(addCurrentMovies, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(removeCurrentMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(moviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(moveCurrentFinishedMovies)
                                    .addComponent(moveFinishedCurrentMovies))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(moviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, moviesLayout.createSequentialGroup()
                                .addComponent(addFinishedMovies, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeFinishedMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(moviesLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(byNameMovies)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(byGenreMovies)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(byDateMovies)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(byOwnershipMovies)))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        moviesLayout.setVerticalGroup(
            moviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(moviesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(moviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(byNameMovies)
                    .addComponent(byGenreMovies)
                    .addComponent(byDateMovies)
                    .addComponent(byOwnershipMovies))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(moviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(moviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(moviesLayout.createSequentialGroup()
                            .addGap(132, 132, 132)
                            .addComponent(moveToDoCurrentMovies)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(moveCurrentToDoMovies)))
                    .addGroup(moviesLayout.createSequentialGroup()
                        .addGroup(moviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(moviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(moviesLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(moviesLayout.createSequentialGroup()
                                .addGap(133, 133, 133)
                                .addComponent(moveCurrentFinishedMovies)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(moveFinishedCurrentMovies)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(moviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(removeToDoMovies)
                    .addComponent(addToDoMovies)
                    .addComponent(removeFinishedMovies)
                    .addGroup(moviesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addCurrentMovies)
                        .addComponent(addFinishedMovies))
                    .addComponent(removeCurrentMovies))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("MOVIES", movies);

        jLabel14.setFont(new java.awt.Font("Noto Sans", 0, 24)); // NOI18N
        jLabel14.setText("Sort:");

        tvSort.add(byNameTv);
        byNameTv.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        byNameTv.setText("By Name");
        byNameTv.setToolTipText("");
        byNameTv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                byNameTvActionPerformed(evt);
            }
        });

        tvSort.add(byGenreTv);
        byGenreTv.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        byGenreTv.setText("By Genre");
        byGenreTv.setToolTipText("");
        byGenreTv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                byGenreTvActionPerformed(evt);
            }
        });

        tvSort.add(byDateTv);
        byDateTv.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        byDateTv.setText("By Date");
        byDateTv.setToolTipText("");
        byDateTv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                byDateTvActionPerformed(evt);
            }
        });

        tvSort.add(byOwnershipTv);
        byOwnershipTv.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        byOwnershipTv.setText("By Ownership");
        byOwnershipTv.setToolTipText("");
        byOwnershipTv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                byOwnershipTvActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Finished");

        toDoTv.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", " " };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        toDoTv.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        toDoTv.setDragEnabled(true);
        toDoTv.setMaximumSize(null);
        toDoTv.setVisibleRowCount(12);
        toDoTv.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                toDoTvPropertyChange(evt);
            }
        });
        jScrollPane10.setViewportView(toDoTv);

        currentTv.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        currentTv.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        currentTv.setMaximumSize(null);
        currentTv.setVisibleRowCount(12);
        jScrollPane11.setViewportView(currentTv);

        jLabel16.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("Want to Watch");

        jLabel17.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("Working On / Priority");

        finishedTv.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        finishedTv.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        finishedTv.setMaximumSize(null);
        finishedTv.setVisibleRowCount(12);
        jScrollPane12.setViewportView(finishedTv);

        moveToDoCurrentTv.setText(">");
        moveToDoCurrentTv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveToDoCurrentTvActionPerformed(evt);
            }
        });

        moveCurrentToDoTv.setText("<");
        moveCurrentToDoTv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveCurrentToDoTvActionPerformed(evt);
            }
        });

        moveFinishedCurrentTv.setText("<");
        moveFinishedCurrentTv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveFinishedCurrentTvActionPerformed(evt);
            }
        });

        moveCurrentFinishedTv.setText(">");
        moveCurrentFinishedTv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveCurrentFinishedTvActionPerformed(evt);
            }
        });

        addToDoTv.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        addToDoTv.setText("Add");
        addToDoTv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToDoTvActionPerformed(evt);
            }
        });

        removeToDoTv.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        removeToDoTv.setText("Remove");
        removeToDoTv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeToDoTvActionPerformed(evt);
            }
        });

        removeCurrentTv.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        removeCurrentTv.setText("Remove");
        removeCurrentTv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCurrentTvActionPerformed(evt);
            }
        });

        addCurrentTv.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        addCurrentTv.setText("Add");
        addCurrentTv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCurrentTvActionPerformed(evt);
            }
        });

        addFinishedTv.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        addFinishedTv.setText("Add");
        addFinishedTv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFinishedTvActionPerformed(evt);
            }
        });

        removeFinishedTv.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        removeFinishedTv.setText("Remove");
        removeFinishedTv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFinishedTvActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tvLayout = new javax.swing.GroupLayout(tv);
        tv.setLayout(tvLayout);
        tvLayout.setHorizontalGroup(
            tvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tvLayout.createSequentialGroup()
                .addGroup(tvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tvLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(tvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(tvLayout.createSequentialGroup()
                                .addComponent(addToDoTv, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeToDoTv, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(tvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(moveToDoCurrentTv)
                            .addComponent(moveCurrentToDoTv))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(tvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(tvLayout.createSequentialGroup()
                                .addGroup(tvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(tvLayout.createSequentialGroup()
                                        .addComponent(addCurrentTv, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(removeCurrentTv, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(tvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(moveCurrentFinishedTv)
                                    .addComponent(moveFinishedCurrentTv))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(tvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tvLayout.createSequentialGroup()
                                .addComponent(addFinishedTv, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeFinishedTv, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(tvLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(byNameTv)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(byGenreTv)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(byDateTv)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(byOwnershipTv)))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        tvLayout.setVerticalGroup(
            tvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tvLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(byNameTv)
                    .addComponent(byGenreTv)
                    .addComponent(byDateTv)
                    .addComponent(byOwnershipTv))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(tvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(tvLayout.createSequentialGroup()
                            .addGap(132, 132, 132)
                            .addComponent(moveToDoCurrentTv)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(moveCurrentToDoTv)))
                    .addGroup(tvLayout.createSequentialGroup()
                        .addGroup(tvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(tvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tvLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(tvLayout.createSequentialGroup()
                                .addGap(133, 133, 133)
                                .addComponent(moveCurrentFinishedTv)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(moveFinishedCurrentTv)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(removeToDoTv)
                    .addComponent(addToDoTv)
                    .addComponent(removeFinishedTv)
                    .addGroup(tvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addCurrentTv)
                        .addComponent(addFinishedTv))
                    .addComponent(removeCurrentTv))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("TV", tv);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void moveCurrentToDoGamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveCurrentToDoGamesActionPerformed
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("UPDATE games SET status = 1 WHERE name = '" + currentGames.getSelectedValue().toString() + "'");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_moveCurrentToDoGamesActionPerformed

    private void addToDoGamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToDoGamesActionPerformed

        nameFieldGames.setText(null);
        dateFieldGames.setText(null);
        toDoRadioGames.setSelected(true);
        ownedRadioButtons.clearSelection();
        addGames.setVisible(true);
                
    }//GEN-LAST:event_addToDoGamesActionPerformed

    private void removeToDoGamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeToDoGamesActionPerformed
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DELETE FROM games WHERE name = '" + toDoGames.getSelectedValue().toString() + "'");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_removeToDoGamesActionPerformed

    private void removeCurrentGamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCurrentGamesActionPerformed
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DELETE FROM games WHERE name = '" + currentGames.getSelectedValue().toString() + "'");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_removeCurrentGamesActionPerformed

    private void addCurrentGamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCurrentGamesActionPerformed
        
        nameFieldGames.setText(null);
        dateFieldGames.setText(null);
        currentRadioGames.setSelected(true);
        ownedRadioButtons.clearSelection();
        addGames.setVisible(true);
        
    }//GEN-LAST:event_addCurrentGamesActionPerformed

    private void addFinishedGamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFinishedGamesActionPerformed
        
        nameFieldGames.setText(null);
        dateFieldGames.setText(null);
        finishedRadioGames.setSelected(true);
        ownedRadioButtons.clearSelection();
        addGames.setVisible(true);
        
    }//GEN-LAST:event_addFinishedGamesActionPerformed

    private void removeFinishedGamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFinishedGamesActionPerformed
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DELETE FROM games WHERE name = '" + finishedGames.getSelectedValue().toString() + "'");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_removeFinishedGamesActionPerformed

    private void moveFinishedCurrentGamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveFinishedCurrentGamesActionPerformed
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("UPDATE games SET status = 2 WHERE name = '" + finishedGames.getSelectedValue().toString() + "'");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_moveFinishedCurrentGamesActionPerformed

    private void toDoGamesPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_toDoGamesPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_toDoGamesPropertyChange

    private void nameFieldGamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldGamesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldGamesActionPerformed

    private void dateFieldGamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateFieldGamesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateFieldGamesActionPerformed

    private void ownedRadioGamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ownedRadioGamesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ownedRadioGamesActionPerformed

    private void notOwnedRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notOwnedRadioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_notOwnedRadioActionPerformed

    private void confirmButtonGamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonGamesActionPerformed
        String ownership;
        String status;
        
        if (ownedRadioGames.isSelected())
            ownership = "1";
        else 
            ownership = "0";
        
        if (toDoRadioGames.isSelected())
            status = "1";
        else if (currentRadioGames.isSelected())
            status = "2";
        else
            status = "3";
        
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("INSERT INTO games VALUES (" + "'" + nameFieldGames.getText() + "'" + "," + "'" 
                    + genreBoxGames.getSelectedItem().toString() + "'" + "," + dateFieldGames.getText()
                    + "," + ownership + "," + "'" + consoleBoxGames.getSelectedItem().toString() + "'" + "," + status + ")");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        refreshLists(jLists, connection, order);
        addGames.setVisible(false);
    }//GEN-LAST:event_confirmButtonGamesActionPerformed

    private void toDoRadioGamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toDoRadioGamesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_toDoRadioGamesActionPerformed

    private void currentRadioGamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentRadioGamesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_currentRadioGamesActionPerformed

    private void finishedRadioGamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishedRadioGamesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_finishedRadioGamesActionPerformed

    private void moveToDoCurrentGamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveToDoCurrentGamesActionPerformed
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("UPDATE games SET status = 2 WHERE name = '" + toDoGames.getSelectedValue().toString() + "'");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_moveToDoCurrentGamesActionPerformed

    private void moveCurrentFinishedGamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveCurrentFinishedGamesActionPerformed
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("UPDATE games SET status = 3 WHERE name = '" + currentGames.getSelectedValue().toString() + "'");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_moveCurrentFinishedGamesActionPerformed

    private void byNameGamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_byNameGamesActionPerformed
        order = "name";
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_byNameGamesActionPerformed

    private void byGenreGramesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_byGenreGramesActionPerformed
        order = "genre";
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_byGenreGramesActionPerformed

    private void byDateGamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_byDateGamesActionPerformed
        order = "date";
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_byDateGamesActionPerformed

    private void byOwnershipGamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_byOwnershipGamesActionPerformed
        order = "ownership";
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_byOwnershipGamesActionPerformed

    private void byConsoleGamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_byConsoleGamesActionPerformed
        order = "console";
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_byConsoleGamesActionPerformed

    private void byNameBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_byNameBooksActionPerformed
        order = "name";
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_byNameBooksActionPerformed

    private void byGenreBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_byGenreBooksActionPerformed
        order = "genre";
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_byGenreBooksActionPerformed

    private void byDateBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_byDateBooksActionPerformed
        order = "date";
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_byDateBooksActionPerformed

    private void byOwnershipBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_byOwnershipBooksActionPerformed
        order = "ownership";
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_byOwnershipBooksActionPerformed

    private void byAuthorBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_byAuthorBooksActionPerformed
        order = "author";
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_byAuthorBooksActionPerformed

    private void toDoBooksPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_toDoBooksPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_toDoBooksPropertyChange

    private void moveToDoCurrentBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveToDoCurrentBooksActionPerformed
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("UPDATE books SET status = 2 WHERE name = '" + toDoBooks.getSelectedValue().toString() + "'");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_moveToDoCurrentBooksActionPerformed

    private void moveCurrentToDoBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveCurrentToDoBooksActionPerformed
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("UPDATE books SET status = 1 WHERE name = '" + currentBooks.getSelectedValue().toString() + "'");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_moveCurrentToDoBooksActionPerformed

    private void moveFinishedCurrentBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveFinishedCurrentBooksActionPerformed
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("UPDATE books SET status = 2 WHERE name = '" + finishedBooks.getSelectedValue().toString() + "'");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_moveFinishedCurrentBooksActionPerformed

    private void moveCurrentFinishedBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveCurrentFinishedBooksActionPerformed
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("UPDATE books SET status = 3 WHERE name = '" + currentBooks.getSelectedValue().toString() + "'");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_moveCurrentFinishedBooksActionPerformed

    private void addToDoBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToDoBooksActionPerformed
        nameFieldBooks.setText(null);
        dateFieldBooks.setText(null);
        toDoRadioBooks.setSelected(true);
        ownedRadioButtons.clearSelection();
        addBooks.setVisible(true);
    }//GEN-LAST:event_addToDoBooksActionPerformed

    private void removeToDoBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeToDoBooksActionPerformed
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DELETE FROM books WHERE name = '" + toDoBooks.getSelectedValue().toString() + "'");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_removeToDoBooksActionPerformed

    private void removeCurrentBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCurrentBooksActionPerformed
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DELETE FROM books WHERE name = '" + currentBooks.getSelectedValue().toString() + "'");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_removeCurrentBooksActionPerformed

    private void addCurrentBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCurrentBooksActionPerformed
        
        nameFieldBooks.setText(null);
        dateFieldBooks.setText(null);
        currentRadioBooks.setSelected(true);
        ownedRadioButtons.clearSelection();
        addBooks.setVisible(true);
        
    }//GEN-LAST:event_addCurrentBooksActionPerformed

    private void addFinishedBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFinishedBooksActionPerformed
        
        nameFieldBooks.setText(null);
        dateFieldBooks.setText(null);
        finishedRadioBooks.setSelected(true);
        ownedRadioButtons.clearSelection();
        addBooks.setVisible(true);
        
    }//GEN-LAST:event_addFinishedBooksActionPerformed

    private void removeFinishedBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFinishedBooksActionPerformed
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DELETE FROM books WHERE name = '" + finishedBooks.getSelectedValue().toString() + "'");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_removeFinishedBooksActionPerformed

    private void byNameMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_byNameMoviesActionPerformed
        order = "name";
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_byNameMoviesActionPerformed

    private void byGenreMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_byGenreMoviesActionPerformed
        order = "genre";
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_byGenreMoviesActionPerformed

    private void byDateMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_byDateMoviesActionPerformed
        order = "date";
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_byDateMoviesActionPerformed

    private void byOwnershipMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_byOwnershipMoviesActionPerformed
        order = "ownership";
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_byOwnershipMoviesActionPerformed

    private void toDoMoviesPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_toDoMoviesPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_toDoMoviesPropertyChange

    private void moveToDoCurrentMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveToDoCurrentMoviesActionPerformed
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("UPDATE movies SET status = 2 WHERE name = '" + toDoMovies.getSelectedValue().toString() + "'");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_moveToDoCurrentMoviesActionPerformed

    private void moveCurrentToDoMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveCurrentToDoMoviesActionPerformed
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("UPDATE movies SET status = 1 WHERE name = '" + currentMovies.getSelectedValue().toString() + "'");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_moveCurrentToDoMoviesActionPerformed

    private void moveFinishedCurrentMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveFinishedCurrentMoviesActionPerformed
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("UPDATE movies SET status = 2 WHERE name = '" + finishedMovies.getSelectedValue().toString() + "'");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_moveFinishedCurrentMoviesActionPerformed

    private void moveCurrentFinishedMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveCurrentFinishedMoviesActionPerformed
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("UPDATE movies SET status = 3 WHERE name = '" + currentMovies.getSelectedValue().toString() + "'");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_moveCurrentFinishedMoviesActionPerformed

    private void addToDoMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToDoMoviesActionPerformed
        nameFieldMovies.setText(null);
        dateFieldMovies.setText(null);
        toDoRadioMovies.setSelected(true);
        ownedRadioButtons.clearSelection();
        addMovies.setVisible(true);
    }//GEN-LAST:event_addToDoMoviesActionPerformed

    private void removeToDoMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeToDoMoviesActionPerformed
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DELETE FROM movies WHERE name = '" + toDoMovies.getSelectedValue().toString() + "'");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_removeToDoMoviesActionPerformed

    private void removeCurrentMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCurrentMoviesActionPerformed
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DELETE FROM movies WHERE name = '" + currentMovies.getSelectedValue().toString() + "'");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_removeCurrentMoviesActionPerformed

    private void addCurrentMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCurrentMoviesActionPerformed
        
        nameFieldMovies.setText(null);
        dateFieldMovies.setText(null);
        currentRadioMovies.setSelected(true);
        ownedRadioButtons.clearSelection();
        addMovies.setVisible(true);
        
    }//GEN-LAST:event_addCurrentMoviesActionPerformed

    private void addFinishedMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFinishedMoviesActionPerformed
        
        nameFieldMovies.setText(null);
        dateFieldMovies.setText(null);
        finishedRadioMovies.setSelected(true);
        ownedRadioButtons.clearSelection();
        addMovies.setVisible(true);
        
    }//GEN-LAST:event_addFinishedMoviesActionPerformed

    private void removeFinishedMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFinishedMoviesActionPerformed
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DELETE FROM movies WHERE name = '" + finishedMovies.getSelectedValue().toString() + "'");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_removeFinishedMoviesActionPerformed

    private void byNameTvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_byNameTvActionPerformed
        order = "name";
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_byNameTvActionPerformed

    private void byGenreTvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_byGenreTvActionPerformed
        order = "genre";
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_byGenreTvActionPerformed

    private void byDateTvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_byDateTvActionPerformed
        order = "date";
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_byDateTvActionPerformed

    private void byOwnershipTvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_byOwnershipTvActionPerformed
        order = "ownership";
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_byOwnershipTvActionPerformed

    private void toDoTvPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_toDoTvPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_toDoTvPropertyChange

    private void moveToDoCurrentTvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveToDoCurrentTvActionPerformed
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("UPDATE tv SET status = 2 WHERE name = '" + toDoTv.getSelectedValue().toString() + "'");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_moveToDoCurrentTvActionPerformed

    private void moveCurrentToDoTvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveCurrentToDoTvActionPerformed
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("UPDATE tv SET status = 1 WHERE name = '" + currentTv.getSelectedValue().toString() + "'");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_moveCurrentToDoTvActionPerformed

    private void moveFinishedCurrentTvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveFinishedCurrentTvActionPerformed
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("UPDATE tv SET status = 2 WHERE name = '" + finishedTv.getSelectedValue().toString() + "'");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_moveFinishedCurrentTvActionPerformed

    private void moveCurrentFinishedTvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveCurrentFinishedTvActionPerformed
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("UPDATE tv SET status = 3 WHERE name = '" + currentTv.getSelectedValue().toString() + "'");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_moveCurrentFinishedTvActionPerformed

    private void addToDoTvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToDoTvActionPerformed
        nameFieldTv.setText(null);
        dateFieldTv.setText(null);
        toDoRadioTv.setSelected(true);
        ownedRadioButtons.clearSelection();
        addTv.setVisible(true);
    }//GEN-LAST:event_addToDoTvActionPerformed

    private void removeToDoTvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeToDoTvActionPerformed
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DELETE FROM tv WHERE name = '" + toDoTv.getSelectedValue().toString() + "'");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_removeToDoTvActionPerformed

    private void removeCurrentTvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCurrentTvActionPerformed
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DELETE FROM tv WHERE name = '" + currentTv.getSelectedValue().toString() + "'");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_removeCurrentTvActionPerformed

    private void addCurrentTvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCurrentTvActionPerformed
        
        nameFieldTv.setText(null);
        dateFieldTv.setText(null);
        currentRadioTv.setSelected(true);
        ownedRadioButtons.clearSelection();
        addTv.setVisible(true);
        
    }//GEN-LAST:event_addCurrentTvActionPerformed

    private void addFinishedTvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFinishedTvActionPerformed
        
        nameFieldTv.setText(null);
        dateFieldTv.setText(null);
        finishedRadioTv.setSelected(true);
        ownedRadioButtons.clearSelection();
        addTv.setVisible(true);
        
    }//GEN-LAST:event_addFinishedTvActionPerformed

    private void removeFinishedTvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFinishedTvActionPerformed
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DELETE FROM tv WHERE name = '" + finishedTv.getSelectedValue().toString() + "'");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_removeFinishedTvActionPerformed

    private void nameFieldBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldBooksActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldBooksActionPerformed

    private void dateFieldBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateFieldBooksActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateFieldBooksActionPerformed

    private void ownedRadioBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ownedRadioBooksActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ownedRadioBooksActionPerformed

    private void notOwnedRadioBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notOwnedRadioBooksActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_notOwnedRadioBooksActionPerformed

    private void confirmButtonBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonBooksActionPerformed
        String ownership;
        String status;
        
        if (ownedRadioBooks.isSelected())
            ownership = "1";
        else 
            ownership = "0";
        
        if (toDoRadioBooks.isSelected())
            status = "1";
        else if (currentRadioBooks.isSelected())
            status = "2";
        else
            status = "3";
        
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("INSERT INTO books VALUES (" + "'" + nameFieldBooks.getText() + "'" + "," + "'" 
                    + genreBoxBooks.getSelectedItem().toString() + "'" + "," + "'" + dateFieldBooks.getText() + "'" 
                    + "," + ownership + "," + "'" + authorFieldBooks.getText() + "'" + "," + status + ")");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        refreshLists(jLists, connection, order);
        addBooks.setVisible(false);
    }//GEN-LAST:event_confirmButtonBooksActionPerformed

    private void toDoRadioBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toDoRadioBooksActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_toDoRadioBooksActionPerformed

    private void currentRadioBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentRadioBooksActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_currentRadioBooksActionPerformed

    private void finishedRadioBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishedRadioBooksActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_finishedRadioBooksActionPerformed

    private void nameFieldMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldMoviesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldMoviesActionPerformed

    private void dateFieldMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateFieldMoviesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateFieldMoviesActionPerformed

    private void ownedRadioMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ownedRadioMoviesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ownedRadioMoviesActionPerformed

    private void notOwnedRadioMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notOwnedRadioMoviesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_notOwnedRadioMoviesActionPerformed

    private void confirmButtonMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonMoviesActionPerformed
        String ownership;
        String status;
        
        if (ownedRadioMovies.isSelected())
            ownership = "1";
        else 
            ownership = "0";
        
        if (toDoRadioMovies.isSelected())
            status = "1";
        else if (currentRadioMovies.isSelected())
            status = "2";
        else
            status = "3";
        
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("INSERT INTO movies VALUES (" + "'" + nameFieldMovies.getText() + "'" + "," + "'" 
                    + genreBoxMovies.getSelectedItem().toString() + "'" + "," + "'" + dateFieldMovies.getText() + "'" 
                    + "," + ownership + "," + status + ")");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        refreshLists(jLists, connection, order);
        addMovies.setVisible(false);
    }//GEN-LAST:event_confirmButtonMoviesActionPerformed

    private void toDoRadioMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toDoRadioMoviesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_toDoRadioMoviesActionPerformed

    private void currentRadioMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentRadioMoviesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_currentRadioMoviesActionPerformed

    private void finishedRadioMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishedRadioMoviesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_finishedRadioMoviesActionPerformed

    private void authorFieldBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authorFieldBooksActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_authorFieldBooksActionPerformed

    private void nameFieldTvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldTvActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldTvActionPerformed

    private void dateFieldTvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateFieldTvActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateFieldTvActionPerformed

    private void confirmButtonTvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonTvActionPerformed
        String status;
        
        if (toDoRadioTv.isSelected())
            status = "1";
        else if (currentRadioTv.isSelected())
            status = "2";
        else
            status = "3";
        
        try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("INSERT INTO tv VALUES (" + "'" + nameFieldTv.getText() + "'" + "," + "'" 
                    + genreBoxTv.getSelectedItem().toString() + "'" + "," + "'" + dateFieldTv.getText() + "'" 
                    + "," + status + ")");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        refreshLists(jLists, connection, order);
        addTv.setVisible(false);
    }//GEN-LAST:event_confirmButtonTvActionPerformed

    private void toDoRadioTvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toDoRadioTvActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_toDoRadioTvActionPerformed

    private void currentRadioTvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentRadioTvActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_currentRadioTvActionPerformed

    private void finishedRadioTvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishedRadioTvActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_finishedRadioTvActionPerformed

    private void genreBoxBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genreBoxBooksActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_genreBoxBooksActionPerformed

    private void consoleBoxGamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consoleBoxGamesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_consoleBoxGamesActionPerformed

    private void mysqlUsernameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mysqlUsernameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mysqlUsernameFieldActionPerformed

    private void mysqlConnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mysqlConnectButtonActionPerformed
        String mysqlPass = new String(mysqlPasswordField.getPassword());
        try {
            connection = new mysqlConnection().connection(mysqlURLField.getText(), mysqlDatabaseNameField.getText(), mysqlUsernameField.getText(), 
                                                            mysqlPass, mysqlPortField.getText());
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (mysqlRememberCheckbox.isSelected()){
            mysqlInfo = new File("mysqlLoginInfo.txt");
            try {
                PrintWriter writer = new PrintWriter (mysqlInfo);
                writer.println(mysqlURLField.getText());
                writer.println(mysqlDatabaseNameField.getText());
                writer.println(mysqlUsernameField.getText());
                writer.println(mysqlPass);
                writer.println(mysqlPortField.getText());
                writer.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            if (mysqlInfo.exists()){
                mysqlInfo.delete();
            }
        }
        mysqlLogin.setVisible(false);
        
        refreshLists(jLists, connection, order);
    }//GEN-LAST:event_mysqlConnectButtonActionPerformed

    private void mysqlURLFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mysqlURLFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mysqlURLFieldActionPerformed

    private void mysqlDatabaseNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mysqlDatabaseNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mysqlDatabaseNameFieldActionPerformed

    private void genreBoxTvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genreBoxTvActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_genreBoxTvActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UI().setVisible(true);
                if (mysqlInfo.exists()){
                    try {
                        Scanner sc = new Scanner (mysqlInfo);
                        mysqlURLField.setText(sc.nextLine());
                        mysqlDatabaseNameField.setText(sc.nextLine());
                        mysqlUsernameField.setText(sc.nextLine());
                        mysqlPasswordField.setText(sc.nextLine());
                        mysqlPortField.setText(sc.nextLine());
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                mysqlLogin.setVisible(true);
                
                //initialize jLists array
                jLists[0] = toDoGames;
                jLists[1] = currentGames;
                jLists[2] = finishedGames;
                jLists[3] = toDoBooks;
                jLists[4] = currentBooks;
                jLists[5] = finishedBooks;
                jLists[6] = toDoMovies;
                jLists[7] = currentMovies;
                jLists[8] = finishedMovies;
                jLists[9] = toDoTv;
                jLists[10] = currentTv;
                jLists[11] = finishedTv;
              
            }
        });
        
    }
    
    public static void refreshLists(JList[] list, Connection connection, String order){
        if (order == "author"){
            try{
                populateJList(list[3], "SELECT * FROM books WHERE status = 1 ORDER BY " +  order +  " ASC", connection);
                populateJList(list[4], "SELECT * FROM books WHERE status = 2 ORDER BY " +  order +  " ASC", connection);
                populateJList(list[5], "SELECT * FROM books WHERE status = 3 ORDER BY " +  order +  " ASC", connection);
            }
            catch (SQLException ex) {
                Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if (order == "console"){
            try{
                populateJList(list[0], "SELECT * FROM games WHERE status = 1 ORDER BY " +  order +  " ASC", connection);
                populateJList(list[1], "SELECT * FROM games WHERE status = 2 ORDER BY " +  order +  " ASC", connection);
                populateJList(list[2], "SELECT * FROM games WHERE status = 3 ORDER BY " +  order +  " ASC", connection);
            }
            catch (SQLException ex) {
                Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            try {
                populateJList(list[0], "SELECT * FROM games WHERE status = 1 ORDER BY " +  order +  " ASC", connection);
                populateJList(list[1], "SELECT * FROM games WHERE status = 2 ORDER BY " +  order +  " ASC", connection);
                populateJList(list[2], "SELECT * FROM games WHERE status = 3 ORDER BY " +  order +  " ASC", connection);
                populateJList(list[3], "SELECT * FROM books WHERE status = 1 ORDER BY " +  order +  " ASC", connection);
                populateJList(list[4], "SELECT * FROM books WHERE status = 2 ORDER BY " +  order +  " ASC", connection);
                populateJList(list[5], "SELECT * FROM books WHERE status = 3 ORDER BY " +  order +  " ASC", connection);
                populateJList(list[6], "SELECT * FROM movies WHERE status = 1 ORDER BY " +  order +  " ASC", connection);
                populateJList(list[7], "SELECT * FROM movies WHERE status = 2 ORDER BY " +  order +  " ASC", connection);
                populateJList(list[8], "SELECT * FROM movies WHERE status = 3 ORDER BY " +  order +  " ASC", connection);
                populateJList(list[9], "SELECT * FROM tv WHERE status = 1 ORDER BY " +  order +  " ASC", connection);
                populateJList(list[10], "SELECT * FROM tv WHERE status = 2 ORDER BY " +  order +  " ASC", connection);
                populateJList(list[11], "SELECT * FROM tv WHERE status = 3 ORDER BY " +  order +  " ASC", connection);
            } catch (SQLException ex) {
                Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
   
    public static void populateJList(JList list, String query, Connection connection) throws SQLException
        {
            DefaultListModel model = new DefaultListModel(); //create a new list model

            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery(query); //run your query
            
            while (resultSet.next()) //go through each row that your query returns
            {
                String itemCode = resultSet.getString("name"); //get the element in column "name"
                model.addElement(itemCode); //add each item to the model
            }
            list.setModel(model);

            resultSet.close();
            statement.close();

        }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog addBooks;
    private javax.swing.JButton addCurrentBooks;
    private javax.swing.JButton addCurrentGames;
    private javax.swing.JButton addCurrentMovies;
    private javax.swing.JButton addCurrentTv;
    private javax.swing.JButton addFinishedBooks;
    private javax.swing.JButton addFinishedGames;
    private javax.swing.JButton addFinishedMovies;
    private javax.swing.JButton addFinishedTv;
    private javax.swing.JDialog addGames;
    private javax.swing.JDialog addMovies;
    private javax.swing.JButton addToDoBooks;
    private javax.swing.JButton addToDoGames;
    private javax.swing.JButton addToDoMovies;
    private javax.swing.JButton addToDoTv;
    private javax.swing.JDialog addTv;
    private javax.swing.JTextField authorFieldBooks;
    private javax.swing.JPanel books;
    private javax.swing.ButtonGroup booksSort;
    private javax.swing.JToggleButton byAuthorBooks;
    private javax.swing.JToggleButton byConsoleGames;
    private javax.swing.JToggleButton byDateBooks;
    private javax.swing.JToggleButton byDateGames;
    private javax.swing.JToggleButton byDateMovies;
    private javax.swing.JToggleButton byDateTv;
    private javax.swing.JToggleButton byGenreBooks;
    private javax.swing.JToggleButton byGenreGrames;
    private javax.swing.JToggleButton byGenreMovies;
    private javax.swing.JToggleButton byGenreTv;
    private javax.swing.JToggleButton byNameBooks;
    private javax.swing.JToggleButton byNameGames;
    private javax.swing.JToggleButton byNameMovies;
    private javax.swing.JToggleButton byNameTv;
    private javax.swing.JToggleButton byOwnershipBooks;
    private javax.swing.JToggleButton byOwnershipGames;
    private javax.swing.JToggleButton byOwnershipMovies;
    private javax.swing.JToggleButton byOwnershipTv;
    private javax.swing.ButtonGroup columnRadioButtons;
    private javax.swing.JButton confirmButtonBooks;
    private javax.swing.JButton confirmButtonGames;
    private javax.swing.JButton confirmButtonMovies;
    private javax.swing.JButton confirmButtonTv;
    public javax.swing.JComboBox consoleBoxGames;
    private javax.swing.JLabel consoleLabel;
    private javax.swing.JLabel consoleLabel1;
    private static javax.swing.JList currentBooks;
    private static javax.swing.JList currentGames;
    private static javax.swing.JList currentMovies;
    private javax.swing.JRadioButton currentRadioBooks;
    private javax.swing.JRadioButton currentRadioGames;
    private javax.swing.JRadioButton currentRadioMovies;
    private javax.swing.JRadioButton currentRadioTv;
    private static javax.swing.JList currentTv;
    public javax.swing.JFormattedTextField dateFieldBooks;
    public javax.swing.JFormattedTextField dateFieldGames;
    public javax.swing.JFormattedTextField dateFieldMovies;
    public javax.swing.JFormattedTextField dateFieldTv;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel dateLabel1;
    private javax.swing.JLabel dateLabel2;
    private javax.swing.JLabel dateLabel3;
    private static javax.swing.JList finishedBooks;
    private static javax.swing.JList finishedGames;
    private static javax.swing.JList finishedMovies;
    private javax.swing.JRadioButton finishedRadioBooks;
    private javax.swing.JRadioButton finishedRadioGames;
    private javax.swing.JRadioButton finishedRadioMovies;
    private javax.swing.JRadioButton finishedRadioTv;
    private static javax.swing.JList finishedTv;
    private javax.swing.JPanel games;
    private javax.swing.ButtonGroup gamesSort;
    public javax.swing.JComboBox genreBoxBooks;
    public javax.swing.JComboBox genreBoxGames;
    public javax.swing.JComboBox genreBoxMovies;
    public javax.swing.JComboBox genreBoxTv;
    private javax.swing.JLabel genreLabel;
    private javax.swing.JLabel genreLabel1;
    private javax.swing.JLabel genreLabel2;
    private javax.swing.JLabel genreLabel3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JButton moveCurrentFinishedBooks;
    private javax.swing.JButton moveCurrentFinishedGames;
    private javax.swing.JButton moveCurrentFinishedMovies;
    private javax.swing.JButton moveCurrentFinishedTv;
    private javax.swing.JButton moveCurrentToDoBooks;
    private javax.swing.JButton moveCurrentToDoGames;
    private javax.swing.JButton moveCurrentToDoMovies;
    private javax.swing.JButton moveCurrentToDoTv;
    private javax.swing.JButton moveFinishedCurrentBooks;
    private javax.swing.JButton moveFinishedCurrentGames;
    private javax.swing.JButton moveFinishedCurrentMovies;
    private javax.swing.JButton moveFinishedCurrentTv;
    private javax.swing.JButton moveToDoCurrentBooks;
    private javax.swing.JButton moveToDoCurrentGames;
    private javax.swing.JButton moveToDoCurrentMovies;
    private javax.swing.JButton moveToDoCurrentTv;
    private javax.swing.JPanel movies;
    private javax.swing.ButtonGroup moviesSort;
    private javax.swing.JButton mysqlConnectButton;
    private static javax.swing.JTextField mysqlDatabaseNameField;
    public static javax.swing.JDialog mysqlLogin;
    private static javax.swing.JPasswordField mysqlPasswordField;
    private static javax.swing.JTextField mysqlPortField;
    private javax.swing.JCheckBox mysqlRememberCheckbox;
    private static javax.swing.JTextField mysqlURLField;
    private static javax.swing.JTextField mysqlUsernameField;
    public javax.swing.JTextField nameFieldBooks;
    public javax.swing.JTextField nameFieldGames;
    public javax.swing.JTextField nameFieldMovies;
    public javax.swing.JTextField nameFieldTv;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel nameLabel1;
    private javax.swing.JLabel nameLabel2;
    private javax.swing.JLabel nameLabel3;
    public javax.swing.JRadioButton notOwnedRadio;
    public javax.swing.JRadioButton notOwnedRadioBooks;
    public javax.swing.JRadioButton notOwnedRadioMovies;
    private javax.swing.JLabel ownedLabel;
    private javax.swing.JLabel ownedLabel1;
    private javax.swing.JLabel ownedLabel2;
    public javax.swing.JRadioButton ownedRadioBooks;
    private javax.swing.ButtonGroup ownedRadioButtons;
    public javax.swing.JRadioButton ownedRadioGames;
    public javax.swing.JRadioButton ownedRadioMovies;
    private javax.swing.JButton removeCurrentBooks;
    private javax.swing.JButton removeCurrentGames;
    private javax.swing.JButton removeCurrentMovies;
    private javax.swing.JButton removeCurrentTv;
    private javax.swing.JButton removeFinishedBooks;
    private javax.swing.JButton removeFinishedGames;
    private javax.swing.JButton removeFinishedMovies;
    private javax.swing.JButton removeFinishedTv;
    private javax.swing.JButton removeToDoBooks;
    private javax.swing.JButton removeToDoGames;
    private javax.swing.JButton removeToDoMovies;
    private javax.swing.JButton removeToDoTv;
    private static javax.swing.JList toDoBooks;
    private static javax.swing.JList toDoGames;
    private static javax.swing.JList toDoMovies;
    private javax.swing.JRadioButton toDoRadioBooks;
    private javax.swing.JRadioButton toDoRadioGames;
    private javax.swing.JRadioButton toDoRadioMovies;
    private javax.swing.JRadioButton toDoRadioTv;
    private static javax.swing.JList toDoTv;
    private javax.swing.JPanel tv;
    private javax.swing.ButtonGroup tvSort;
    // End of variables declaration//GEN-END:variables
    public static Connection connection;
    public static JList[] jLists = new JList[12];
    public static String order = "name";
    public static File mysqlInfo = new File("mysqlLoginInfo.txt");
    }
